global proc shelf_G_USD () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\n\nfrom pprint import pprint\nfrom shutil import copy2\nimport os\n\n\nfrom_local_path = os.path.join(\"/home\", os.environ[\"USERNAME\"], \"maya/2023/prefs/shelves/shelf_G_USD.mel\")\nto_server_path = os.path.join(os.environ[\"HGWEAVER_USD_ROOT\"], \"shelves\")\n\nprint(from_local_path)\nprint(to_server_path)\ncopy2(from_local_path, to_server_path)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "\n\nfrom pprint import pprint\nfrom shutil import copy2\nimport os\n\n..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Update" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.6 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\n\nfrom pprint import pprint\nfrom shutil import copy2\nimport os\n\n\nfrom_local_path = os.path.join(\"/home\", os.environ[\"USERNAME\"], \"maya/2023/prefs/shelves/shelf_G_USD.mel\")\nto_server_path = os.path.join(os.environ[\"HGWEAVER_USD_ROOT\"], \"shelves\")\n\nprint(from_local_path)\nprint(to_server_path)\ncopy2(from_local_path, to_server_path)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\n\n\nimport sys, os\n\npath_list = [\n                os.environ[\"HGWEAVER_USD_ROOT\"]+\"/module\",\n                os.environ[\"HGWEAVER_USD_ROOT\"]+\"/code\"\n            ]\n            \nfor _path in path_list:\n    if _path in sys.path:\n        continue\n    sys.path.append(_path)          " 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "\n\n\nimport sys, os\n\npath_list = [\n                os.environ[\"HGW..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "setEnv" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\n\n\nimport sys, os\n\npath_list = [\n                os.environ[\"HGWEAVER_USD_ROOT\"]+\"/module\",\n                os.environ[\"HGWEAVER_USD_ROOT\"]+\"/code\"\n            ]\n\n\npxr_PYTHONPATH = [\n\t\t\t\t\t\t\"\"\n\t\t\t\t\t]\n\n\n            \nfor _path in path_list:\n    if _path in sys.path:\n        continue\n    sys.path.append(_path)\n\n\n\n\n\n\nos.chdir(os.environ[\"HGWEAVER_USD_ROOT\"]+\"/../research\")\nusd_research_dir = os.getcwd()\nos.environ['HGWEAVER_USD_RESEARCH'] = usd_research_dir\n\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\n\n# Export mdl\nfrom importlib import reload\nimport hgweaverUSD\nreload(hgweaverUSD)\n\n\n\ndef get_export_path() -> str:\n    basicFilter = \"*.usd\"\n    res=cmds.fileDialog2(fileFilter=basicFilter, dialogStyle=2, okc=\"Export as\")\n    if res == None:\n        return\n        \n    export_mdl_path = res[0]\n    return export_mdl_path\n\n\n\ndef main() -> None:\n    export_path = get_export_path()\n        \n    selected_tar = cmds.ls(sl=True, l=True)\n    if selected_tar == []:\n        cmds.confirmDialog(msg=\"아무것도 선택된것이 없습니다.\")\n        return\n    hgweaverUSD.export_selected(export_path, 'mdl')\n    \nmain()\n    \n\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "\n\n# Export mdl\nfrom importlib import reload\nimport hgweaverUSD\nr..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "exMDL" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.6 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\n\n# Export mdl\nfrom importlib import reload\nfrom re import sub\nimport hgweaverUSD\nreload(hgweaverUSD)\n\ndef get_assetname_input() -> str:\n    result = cmds.promptDialog(\n                title='HGweaver USD',\n                message='어셋 이름을 입력해주십시오 :',\n                button=['OK', 'Cancel'],\n                defaultButton='OK',\n                cancelButton='Cancel',\n                dismissString='Cancel')\n\n    if result == 'OK':\n        text = cmds.promptDialog(query=True, text=True)\n        return text\n    else:\n        return \"\"\n\n\ndef get_export_mdl_path() -> str:\n    basicFilter = \"*.usd\"\n    res=cmds.fileDialog2(fileFilter=basicFilter, dialogStyle=2, fileMode=3, okc=\"Select DIR\")\n    if res == None:\n        return \"\"\n    export_mdl_dirpath = res[0]\n    \n    input_assetname = get_assetname_input()\n    if input_assetname == \"\":\n        return \"\"\n    \n    export_mdl_path = export_mdl_dirpath + \"/\" + input_assetname + \"_mdl.usd\"\n    return export_mdl_path\n\n\n\ndef main() -> None:\n    export_path = get_export_mdl_path()\n        \n    selected_tar = cmds.ls(sl=True, l=True)\n    if selected_tar == []:\n        cmds.confirmDialog(msg=\"아무것도 선택된것이 없습니다.\")\n        return\n    hgweaverUSD.export_selected(export_path, 'mdl')\n    \n    \n    \n    \nmain()\n    \n\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\n\n# Export mdl\nfrom importlib import reload\nimport hgweaverUSD\nreload(hgweaverUSD)\n\n\n\ndef get_export_path() -> str:\n    basicFilter = \"*.usd\"\n    res=cmds.fileDialog2(fileFilter=basicFilter, dialogStyle=2, okc=\"Export as\")\n    if res == None:\n        return\n        \n    export_mdl_path = res[0]\n    return export_mdl_path\n\ndef get_modeling_path():\n    asicFilter = \"*.usd\"\n    res=cmds.fileDialog2(fileFilter=basicFilter, dialogStyle=2, fileMode=1,okc=\"Select\")\n    if res == None:\n        return\n        \n    mdl_usd_path = res[0]\n    return mdl_usd_path \n\n\ndef main() -> None:\n    export_path = get_export_path()\n        \n    selected_tar = cmds.ls(sl=True, l=True)\n    if selected_tar == []:\n        cmds.confirmDialog(msg=\"아무것도 선택된것이 없습니다.\")\n        return\n    hgweaverUSD.export_selected(export_path, 'ldv')\n    \n    ldv_usd_path = export_path\n    mdl_usd_path = get_modeling_path()\n    \n    ldv_stage = hgweaverUSD.open_stage(ldv_usd_path)\n    mdl_stage = hgweaverUSD.open_stage(ldv_usd_path)\n    \n    \n    \nmain()\n    " 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "\n\n# Export mdl\nfrom importlib import reload\nimport hgweaverUSD\nr..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "exLDV" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\n\n# Export mdl\nfrom pxr import Usd, UsdUtils, Sdf, UsdShade\nfrom importlib import reload\nfrom os import path\nimport hgweaverUSD\nreload(hgweaverUSD)\n\n\ndef get_assetname_from_mdlpath(input_path :str) -> str:\n    fname = path.basename(input_path)\n    assetname = fname.replace(\"_mdl.usd\", \"\")\n    return assetname\n\n\ndef get_modeling_path():\n    asicFilter = \"*.usd\"\n    res=cmds.fileDialog2(fileFilter=basicFilter, dialogStyle=2, fileMode=1,okc=\"Select\")\n    if res == None:\n        return\n        \n    mdl_usd_path = res[0]\n    return mdl_usd_path \n    \n\ndef make_ldv_path(mdl_usd_path :str) -> str:\n    ldv_usd_path = \"\"\n    \n    assetname = get_assetname_from_mdlpath(mdl_usd_path)\n    \n    dir_path = path.dirname(mdl_usd_path)\n    ldv_usd_path = dir_path + \"/\" + assetname + \"_ldv.usd\"\n\n    return ldv_usd_path\n    \n    \ndef make_total_assetusd(mdl_usd_path :str) -> str:\n    asset_usd_path = \"\"\n    \n    assetname = get_assetname_from_mdlpath(mdl_usd_path)\n\n    dir_path = path.dirname(mdl_usd_path)\n    asset_usd_path = dir_path + \"/\" + assetname + \".usd\"\n\n    return asset_usd_path\n\n\ndef main() -> None:\n    # make and set usd stage path\n    mdl_usd_path   = get_modeling_path()\n    ldv_usd_path   = make_ldv_path(mdl_usd_path)\n    asset_usd_path = make_total_assetusd(mdl_usd_path)\n    \n    \n    selected_tar = cmds.ls(sl=True, l=True)\n    if selected_tar == []:\n        cmds.confirmDialog(msg=\"아무것도 선택된것이 없습니다.\")\n        return\n    \n    \n    hgweaverUSD.export_selected(ldv_usd_path, 'ldv')\n    \n    ldv_stage = hgweaverUSD.open_stage(ldv_usd_path)\n    mdl_stage = hgweaverUSD.open_stage(ldv_usd_path)\n    \n    asset_stage = hgweaverUSD.make_stage(asset_usd_path)\n    \n    \n    # Do sublayering\n    asset_root_layer = asset_stage.GetRootLayer()\n    if mdl_usd_path not in asset_root_layer.subLayerPaths:\n        asset_root_layer.subLayerPaths.append(mdl_usd_path)\n    if ldv_usd_path not in asset_root_layer.subLayerPaths:\n        asset_root_layer.subLayerPaths.append(ldv_usd_path)\n    \n    \n    # Get assigned info\n    assigned_info = hgweaverUSD.get_assigned_info()\n    \n    for _mat, _geo_list in assigned_info.items():\n        # Create Materials\n        defined_mat = UsdShade.Material.Define(asset_stage, '/Materials/'+_mat)\n        mat_input = defined_mat.CreateOutput(\"arnold:surface\", Sdf.ValueTypeNames.Token)\n         \n        # Override shader and geo Prim\n        # Bind geo and material\n        overrided_shader_prim = asset_stage.OverridePrim('/{0}'.format(_mat))\n        overrided_shader = UsdShade.Shader.Get(asset_stage, '/{0}'.format(_mat))\n         \n         \n        shd_input = overrided_shader.CreateOutput(\"surface\", Sdf.ValueTypeNames.Token)\n        mat_input.ConnectToSource(shd_input)\n        for _geo in _geo_list:\n            overrided_geo_prim = asset_stage.OverridePrim(_geo)\n            UsdShade.MaterialBindingAPI(overrided_geo_prim).Bind(defined_mat)\n    \n    \n    ldv_stage.Save()\n    mdl_stage.Save()\n    asset_stage.Save()\n    \n    \n    \nmain()\n    \n    \n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "# import usd\nfrom importlib import reload\nimport hgweaverUSD\nreload(hgweaverUSD)\n\n\n\n\ndef get_import_path() -> str:\n    basicFilter = \"*.usd\"\n    res=cmds.fileDialog2(fileFilter=basicFilter, dialogStyle=2, fileMode=1,okc=\"import\")\n    if res == None:\n        return\n        \n    import_path = res[0]\n    return import_path\n\n\ndef main() -> None:\n    import_path = get_import_path()\n    hgweaverUSD.stage_from_file(import_path)        \n        \n        \nmain()\n    \n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "# import usd\nfrom importlib import reload\nimport hgweaverUSD\nrel..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "import" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.6 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "# import usd\nfrom importlib import reload\nimport hgweaverUSD\nreload(hgweaverUSD)\n\n\n\n\ndef get_import_path() -> str:\n    basicFilter = \"*.usd\"\n    res=cmds.fileDialog2(fileFilter=basicFilter, dialogStyle=2, fileMode=1,okc=\"import\")\n    if res == None:\n        return\n        \n    import_path = res[0]\n    return import_path\n\n\ndef main() -> None:\n    import_path = get_import_path()\n    hgweaverUSD.stage_from_file(import_path)        \n        \n        \nmain()\n    \n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "# import usd\nfrom importlib import reload\nimport hgweaverUSD\nreload(hgweaverUSD)\n\n\n\n\ndef get_import_path() -> str:\n    basicFilter = \"*.usd\"\n    res=cmds.fileDialog2(fileFilter=basicFilter, dialogStyle=2, fileMode=1,okc=\"import\")\n    if res == None:\n        return\n        \n    import_path = res[0]\n    return import_path\n\n\ndef main() -> None:\n    import_path = get_import_path()\n    target_stage = hgweaverUSD.open_stage(import_path)\n    stage_contents = target_stage.ExportToString()\n    print(stage_contents)\n        \n        \nmain()\n    " 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "# import usd\nfrom importlib import reload\nimport hgweaverUSD\nrel..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "ToSTR" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "# import usd\nfrom importlib import reload\nimport hgweaverUSD\nreload(hgweaverUSD)\n\n\n\n\ndef get_import_path() -> str:\n    basicFilter = \"*.usd\"\n    res=cmds.fileDialog2(fileFilter=basicFilter, dialogStyle=2, fileMode=1,okc=\"import\")\n    if res == None:\n        return\n        \n    import_path = res[0]\n    return import_path\n\n\ndef main() -> None:\n    import_path = get_import_path()\n    target_stage = hgweaverUSD.open_stage(import_path)\n    stage_contents = target_stage.ExportToString()\n    print(stage_contents)\n        \n        \nmain()\n    " 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "# import usd\nfrom importlib import reload\nimport os\nimport hgweaverUSD\nreload(hgweaverUSD)\n\n\ndef get_usd_pythonpath_path() -> str:\n    return os.path.join(os.environ[\"USD_LOCATION\"], \"lib\", \"python\")\n\ndef get_mayapy_path() -> str:\n    return \"/usr/autodesk/maya2023/bin/mayapy\"\n\ndef get_usdedit_path() -> str:\n    return os.path.join(os.environ[\"USD_LOCATION\"], \"bin\", \"usdcat\")\n\n\n\n\ndef get_target_path() -> str:\n    basicFilter = \"*.usd\"\n    res=cmds.fileDialog2(fileFilter=basicFilter, dialogStyle=2, fileMode=1,okc=\"import\")\n    if res == None:\n        return\n        \n    tar_path = res[0]\n    return tar_path\n\n\ndef main() -> None:\n    pythonpath_tar = get_usd_pythonpath_path()\n    mayapy_path = get_mayapy_path()\n    \n    usdedit_path = get_usdedit_path()\n    target_path  = get_target_path()\n    \n    print(\"export PYTHONPATH=$PYTHONPATH:{0}\".format(pythonpath_tar))\n    os.popen(\"export PYTHONPATH=$PYTHONPATH:{0}\".format(pythonpath_tar))\n    \n    print(mayapy_path + \" \" + usdedit_path + \" \" + target_path + \" > \" + target_path+\"a\")\n    os.popen(mayapy_path + \" \" + usdedit_path + \" \" + target_path + \" > \" + target_path+\"a\")\n    \n        \n        \nmain()\n    \n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "# import usd\nfrom importlib import reload\nimport os\nimport hgwea..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "ToAscii" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.6 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "# import usd\nfrom importlib import reload\nimport os\nimport hgweaverUSD\nreload(hgweaverUSD)\n\n\ndef get_usd_pythonpath_path() -> str:\n    return os.path.join(os.environ[\"USD_LOCATION\"], \"lib\", \"python\")\n\ndef get_mayapy_path() -> str:\n    return \"/usr/autodesk/maya2023/bin/mayapy\"\n\ndef get_usdedit_path() -> str:\n    return os.path.join(os.environ[\"USD_LOCATION\"], \"bin\", \"usdcat\")\n\n\n\n\ndef get_target_path() -> str:\n    basicFilter = \"*.usd\"\n    res=cmds.fileDialog2(fileFilter=basicFilter, dialogStyle=2, fileMode=1,okc=\"import\")\n    if res == None:\n        return\n        \n    tar_path = res[0]\n    return tar_path\n\n\ndef main() -> None:\n    pythonpath_tar = get_usd_pythonpath_path()\n    mayapy_path = get_mayapy_path()\n    \n    usdedit_path = get_usdedit_path()\n    target_path  = get_target_path()\n    \n    print(\"export PYTHONPATH=$PYTHONPATH:{0}\".format(pythonpath_tar))\n    os.popen(\"export PYTHONPATH=$PYTHONPATH:{0}\".format(pythonpath_tar))\n    \n    print(mayapy_path + \" \" + usdedit_path + \" \" + target_path + \" > \" + target_path+\"a\")\n    os.popen(mayapy_path + \" \" + usdedit_path + \" \" + target_path + \" > \" + target_path+\"a\")\n    \n        \n        \nmain()\n    \n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import os, sys\nfrom importlib import reload\n\n\ncur_cate = \"features\"\ncur_step = \"batch_namespace_edit\"\n\n\npy_dir = os.path.join(os.environ['HGWEAVER_USD_RESEARCH'], \"USD-Cookbook\", cur_cate, cur_step, \"python\")\nif py_dir not in sys.path:\n    sys.path.append(py_dir)\n    \n\nimport batch_namespace_edit\nreload(batch_namespace_edit)\n\nbatch_namespace_edit.main()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import os, sys\nfrom importlib import reload\n\n\ncur_cate = \"featur..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "COOKBOOK" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\nimport os, sys\nfrom importlib import reload\n\n\ncur_cate = \"features\"\ncur_step = \"edit_targets\"\n\n\npy_dir = os.path.join(os.environ['HGWEAVER_USD_RESEARCH'], \"USD-Cookbook\", cur_cate, cur_step, \"python\")\nos.chdir(py_dir)\nif py_dir not in sys.path:\n    sys.path.append(py_dir)\n    \n\n    \n\nimport edit\nreload(edit)\n\nedit.main()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\n\nimport hgweaverUSD_v02\nreload(hgweaverUSD_v02)\n\nhgweaverUSD_v02.open_usdview()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "\n\nimport hgweaverUSD_v02\nreload(hgweaverUSD_v02)\n\nhgweaverUSD_v0..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "USDview" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\n\nimport hgweaverUSD_v02\nreload(hgweaverUSD_v02)\n\nhgweaverUSD_v02.open_usdview()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
